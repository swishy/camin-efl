class Xml.Sax.Base (Eo.Base)
{
   data: Xml_Base_Data;
   constructors {
      constructor { /*@ Custom constructor to allow setting of a handler at creation */
        params {
            @in Eo *handler; /*@ The custom handler for the current XSB instance */
        }
      }
   }
   properties {
      handler {
         set { /*@ This sets the handler of the current XSB object */
         }
         get { /*@ This gets the handler of the XSB object if set */
         }
         values {
            Eo *handler; /*@ The handler for the current XSB instance */
         }
      }
      content_handler {
        set { /*@ This sets a custom content handler */
        }
        get { /*@ This gets the current content handler if set */
        }
        values {
            Eo *handler; /*@ The content handler for the current XSB instance */
        }
      }
      document_handler {
        set { /*@ This sets a custom document handler */
        }
        get { /*@ This gets the current document handler */
        }
        values {
            Eo *handler; /*@ The document handler for the current XSB instance */
        }
      }
   }
   methods {
      parse_string { /*@ This method starts the parsing process of the XML document passed in */
         params {
            @in char *document; /*@ The XML Document to parse */
         }
         return Eo*; /* Can return any Eo object */
      }
      set_document_locator { /*@ Receives the document locator on start of parsing */
        params {
            @in void *ctx; /*@ The Libxml2 parser context */
            @in xmlSAXLocatorPtr loc; /*@ The LibXML2 locator pointer */
        }
      }
      document_start { /*@ Called when the XML Namespace element is hit */
        params {
            @in void *user_data; /*@ Function is passed the user_data set */
        }
      }
      element_start { /*@ Called when XML node element start is hit */
        params {
            @in ElementData *elementData; /*@ Data associated with the element */
        }
      }
      element_char { /*@ Called when XML characters are found within an element */
        params {
            @in void *data;
            @in const(xmlChar) *string;
            @in int string_len;
        }
      }
      element_end { /*@ Called when the end of an XML element is hit */
        params {
            @in ElementData *data;
        }
      }
      document_end { /*@ Called when XML end document is hit */
        params {
            @in void *data;
        }
      }
   }
   implements {
      class.constructor;
   }
}
